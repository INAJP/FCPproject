گزارش توضیحات کد: سیستم مدیریت دانشجویان
فایل‌های سرآیند و فضای نام
:#include <string>امکانات کار با رشته‌ها را اضافه می‌کند.
 :#include <iomanip>قالب‌بندی خروجی (مثل اعشار ثابت) را فعال می‌کند.
ثابت‌های سراسری
 :MAX_STUDENTSحداکثر تعداد دانشجویان قابل مدیریت توسط سیستم.
 :MAX_COURSESحداکثر تعداد دروسی که یک دانشجو می‌تواند ثبت نام کند.
ساختارهای داده
 :Courseاطلاعات درس (نام، نمره، واحدها) را ذخیره می‌کند.
 :Studentاطلاعات دانشجو شامل نام، شناسه، رشته، لیست دروس و تعداد دروس ثبت‌نامی.
متغیرهای سراسری
 :studentsآرایه برای ذخیره تمامی دانشجویان.
 :studentCountتعداد فعلی دانشجویان در سیستم.
تابع: readStudent() 
هدف : افزودن دانشجوی جدید به سیستم.
مراحل:
۱. بررسی رسیدن به حد مجاز دانشجویان.
۲. دریافت نام، شناسه، و رشته دانشجو.
۳. مقداردهی اولیه courseCount  به ۰.
۴. افزودن دانشجو به آرایه students
تابع : readCourse()
هدف:  ثبت دروس برای دانشجویان موجود.
مراحل:
۱. دریافت تعداد دروس برای هر دانشجو.
۲. اعتبارسنجی بر اساس MAX_COURSES
۳. دریافت نام، نمره، و واحدهای هر درس و افزودن به لیست دروس دانشجو.
تابع : calculateGPA(const Student& s)
هدف:  محاسبه معدل دانشجو.
معدل = ∑(نمره*واحد ها)/ ∑(واحد ها)
اگر دانشجو درسی نداشته باشد، معدل ۰ برگردانده می‌شود.
تابع : sortStudentsByGPA(Student arr[], int n)
هدف:  مرتب‌سازی دانشجویان بر اساس معدل (نزولی).
الگوریتم:  استفاده از مرتب‌سازی حبابی برای مقایسه و جابجایی دانشجویان.
تابع : listStudents(const string& majorFilter)
هدف:  نمایش دانشجویان با امکان فیلتر بر اساس رشته.
مراحل:
۱. ایجاد آرایه موقت برای جلوگیری از تغییر داده اصلی.
۲. مرتب‌سازی بر اساس معدل.
۳. چاپ جدول فرمت‌بندی شده با اعمال فیلتر رشته (در صورت وجود).
تابع : printReportCard(const Student& s)
هدف:  چاپ کارنامه کامل دانشجو.
جزئیات:  شامل نام، شناسه، رشته، معدل، و لیست دروس با نمرات و واحدها.
توابع ویرایش و حذف داده‌ها
editStudent(int index) : به‌روزرسانی نام، شناسه، یا رشته دانشجو.
 :deleteStudent(int index) حذف دانشجو از آرایه و کاهش studentCount
 :editCourse(Student& s, int courseIndex) ویرایش نام، نمره، یا واحدهای یک درس.
 :deleteCourse(Student& s, int courseIndex) حذف درس از لیست دروس دانشجو.
گردش کار تابع main()
۱. دریافت داده اولیه:
دریافت تعداد دانشجویان.
فراخوانی  readStudent()و  readCourse() برای پر کردن داده‌ها.
۲. منوی تعاملی:
حلقه بی‌پایان تا انتخاب خروج.
گزینه‌ها شامل نمایش دانشجویان، فیلتر بر اساس رشته، چاپ کارنامه، ویرایش/حذف دانشجو/درس.
استفاده از  cinو منطق  if-else برای مدیریت انتخاب کاربر.
۳. اعتبارسنجی ورودی:
بررسی صحت اندیس‌ها هنگام ویرایش/حذف.
نکات فنی کلیدی
 :cin.ignore()پاکسازی بافر ورودی برای جلوگیری از خطاهای کاراکتر جدید.
قالب‌بندی خروجی :استفاده از setw(), left , و fixed << setprecision(2) برای نمایش منظم.
متغیرهای سراسری :ساده‌سازی پارامترهای توابع اما محدودکننده توسعه‌پذیری.
